name: Manually Deploy to Development Instance

on:
  workflow_dispatch:
    inputs:
      branch:
        description: The branch you want to deploy
        type: string
        required: false
        default: develop
      remote_host:
        description: Deployment host
        type: string
        required: false
        default: 35.172.115.172

concurrency: manually-deploy-to-dev

jobs:
  config:
    uses: ./.github/workflows/config.yaml

  build_and_test-service:
    needs: [ config ]
    uses: ./.github/workflows/build_test.service.yaml

  build_and_test-web-app:
    needs: [ config ]
    uses: ./.github/workflows/build_test.web-app.yaml

  pre-deploy:
    needs: [ config, build_and_test-service, build_and_test-web-app ]
    name: Prepare for Deployment
    runs-on: ubuntu-latest

    steps:
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ needs.config.outputs.node_versions-latest }}
      - name: install json util
        run: npm i -g json
      - name: download service packages
        uses: actions/download-artifact@v2
        with:
          name: mage_service_packages
      - name: download web-app packages
        uses: actions/download-artifact@v2
        with:
          name: mage_web-app_packages
      - name: generate instance package.json
        run: |
          (
          printf '{ "name": "mage.instance", "version": "%s" }\n' ${{ inputs.version }} &&
          printf '{ "scripts": { "start": "mage.service --plugin @ngageoint/mage.nga-msi --plugin @ngageoint/mage.image.service" }}\n' &&
          printf '{ "dependencies": { "@ngageoint/mage.service": "./%s" }}\n' $(ls -1 *mage.service*.tgz) &&
          printf '{ "dependencies": { "@ngageoint/mage.web-app": "./%s" }}\n' $(ls -1 *mage.web-app*.tgz) &&
          printf '{ "dependencies": { "@ngageoint/mage.nga-msi": "./%s" }}\n' $(ls -1 *mage.nga-msi*.tgz) &&
          printf '{ "dependencies": { "@ngageoint/mage.image.service": "./%s" }}\n' $(ls -l *mage.image.service*.tgz)
          ) | json --deep-merge > package.json
          echo "instance package.json"
          cat package.json
  
  deploy:
    needs: [ pre-deploy ]
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to ${{ inputs.remote_host }}
        uses: easingthemes/ssh-deploy@v2.1.5
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          SOURCE: "./"
          REMOTE_HOST: ${{ inputs.remote_host }}
          REMOTE_USER: "ec2-user"
          TARGET: "/tmp"
